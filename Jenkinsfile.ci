def getBranchName(branch) {
  return branch.replaceAll("/", "-").replaceAll(" ", "-").toLowerCase()
}

pipeline {
    agent any

    environment {
        branch = getBranchName("${env.GIT_BRANCH}")
        project = "Kaleidos"
        appName = "${env.JOB_NAME - ~/\/.*/}"
        version = "${branch}-${env.BUILD_NUMBER}"
        projectName = "${project}--${appName}--${version}"
    }

    stages {
        stage('Prepare folder') {
            steps {
                sh "export HOST_UID_GID=\$(id -u):\$(id -g)"

                // Switch in env settings file.
                sh "cp .dist.env .env"

                // Remove project folder if existing.
                sh "rm -rf kaleidos-project 2> /dev/null"
            }
        }
        stage('Clone project inside frontend') {
            steps {
                sh "export HOST_UID_GID=\$(id -u):\$(id -g)"

                // Clone Project
                sh "git clone -b development https://github.com/kanselarij-vlaanderen/kaleidos-project.git"
            }
        }
        stage('Build frontend container') {
            steps {
                sh "export HOST_UID_GID=\$(id -u):\$(id -g)"

                // Switch in Dockerfile for frontend.
                sh "cp ${env.WORKSPACE}/Dockerfile.ci ${env.WORKSPACE}/Dockerfile"

                // Switch in docker-compose override file.
                sh "cp ${env.WORKSPACE}/ci/docker-compose.override.yml ${env.WORKSPACE}/kaleidos-project/docker-compose.override.yml"

                // Change file permissions.
                sh "cd ${WORKSPACE}/kaleidos-project && mkdir data && chmod 1777 -R data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName} up -d --build"
            }
         }
         stage('Reset the database') {
            steps {
                sh "export HOST_UID_GID=\$(id -u):\$(id -g)"

                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName}  exec -T triplestore chmod -R 1777 /data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName}  exec -T musearch chmod 1777 -R /data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName}  exec -T file-bundling-service chmod 777 -R /share"

                // Switch in cypress environment settings.
                sh "cp ${WORKSPACE}/ci/.env.cypress ${WORKSPACE}/.env.cypress"

                // Wait for elasticsearch to have cerated the indices and stuff.
                sh "sleep 10"

                // Reset the contents of DB and search
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose  -p ${projectName} rm -fs elasticsearch  musearch"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose  -p ${projectName} kill triplestore file cache resource"
                sh "cd ${WORKSPACE}/kaleidos-project && rm -rf testdata"
                sh "cd ${WORKSPACE}/kaleidos-project && unzip -o testdata.zip -d ${WORKSPACE}/kaleidos-project"
                sh "cd ${WORKSPACE}/kaleidos-project && rm -rf data/*"
                sh "cd ${WORKSPACE}/kaleidos-project && cp -rf testdata/* data"
            }
         }
         stage('UP all containers') {
            steps {
                sh "export HOST_UID_GID=\$(id -u):\$(id -g)"

                // up te system
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName} up -d"

                // Wait for indexation.
                sh "sleep 60"
            }
        }
        stage('Automated tests: Cypress') {
            steps {
                 sh "export HOST_UID_GID=\$(id -u):\$(id -g)"

                 // Run all tests
                 sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p  ${projectName} exec -T e2e-electron cypress run"
            }
        }

    }

    post {
        always {
            sh "mkdir ${WORKSPACE}/reports"
            sh "mkdir ${WORKSPACE}/reports/cypress_screenshots/"
            sh "touch ${WORKSPACE}/reports/cypress_screenshots/test.png"
            sh "cp -rf ${WORKSPACE}/cypress/screenshots ${WORKSPACE}/reports/cypress_screenshots || true"

            // Cypress reports and screenshots

            archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/cypress_screenshots/**/*.png'
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'reports', reportFiles: 'index.html', reportName: 'Build Reports', reportTitles: 'Build report'])
        }
        success {
            rocketSend channel: 'kaleidosbuilds', message: "Build SUCCESS - ${projectName} (<${env.BUILD_URL}|Open>)", serverUrl: 'https://chat.semte.ch', trustSSL: true, color: 'green', avatar: 'https://github.com/fluidicon.png'
        }
        unstable {
            rocketSend channel: 'kaleidosbuilds', message: "Build UNSTABLE - ${projectName} (<${env.BUILD_URL}|Open>)", serverUrl: 'https://chat.semte.ch', trustSSL: true, color: 'orange', avatar: 'https://github.com/fluidicon.png'
        }
        failure {
            rocketSend channel: 'kaleidosbuilds', message: "Build FAILED - ${projectName}  (<${env.BUILD_URL}|Open>)", serverUrl: 'https://chat.semte.ch', trustSSL: true, color: 'red',avatar: 'https://github.com/fluidicon.png'
        }

        cleanup {
          sh "export HOST_UID_GID=\$(id -u):\$(id -g)"
          sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName} down -v"
          sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName} rm -f"
          sh "docker network prune -f"
          cleanWs()
        }
    }
}
